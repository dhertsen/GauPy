#! /usr/bin/env python2.7

import gaupy.log as log
import sys
import argparse

parser = argparse.ArgumentParser('Extract optima from Gaussian scan')
parser.add_argument('files', nargs='*', help='Gaussian output files',
                    default=sys.stdin)
parser.add_argument('--type', '-t', choices=['max', 'min'],
                    default='min', help='Select minimal or maximal energies')
parser.add_argument('--output', '-o', choices=['com', 'xyz'],
                    default='com', help='Type of output')
parser.add_argument('--sort', '-s', choices=['index', 'energy'],
                    default='energy',
                    help='Sort optima by increasing energy or '
                    'maintain the scan order')
args = parser.parse_args()


def is_optimum(lst, index):
    if ((args.type == 'min'
         and lst[index-1] > lst[index] < lst[(index+1) % len(lst)])
        or (args.type == 'max'
            and lst[index-1] < lst[index] > lst[(index+1) % len(lst)])):
        return True
    return False


for f in args.files:
    try:
        l = log.LOGFile(f)
        energies = []
        geometries = []
        if l.scan:
            for i, e in enumerate(l.scan.energies):
                if is_optimum(l.scan.energies, i):
                    energies.append(e)
                    geometries.append(l.scan.geometries[i])
            if args.sort == 'energy':
                geometries = [g for e, g in sorted(zip(energies, geometries))]
                energies.sort()
            if args.output == 'com':
                l.route_section = l.route_section.replace(',modredundant', '')
                l.route_section = l.route_section.replace('modredundant,', '')
                l.route_section = l.route_section.replace('(modredundant)', '')
                l.route_section += ' freq'
                l.modredundant = ''
                for i, g in enumerate(geometries):
                    filename = l.files.add('%s%03i' % (args.type, i)).com
                    l.geometry = g
                    l.write_input(filename)
            elif args.output == 'xyz':
                for i, g in enumerate(geometries):
                    filename = l.files.add('%s%03i' % (args.type, i)).xyz
                    g.to_xyz(filename)
    except:
        print('ERROR: %s could not be processed' % f)
