#! /usr/bin/python

# import gaupy.log as log
# import gaupy.utils as utils
import argparse
import matplotlib.pyplot as plt
import sys
from gaupy.log import LOGFile, relative_energies

parser = argparse.ArgumentParser('Print energy profiles of geometry '
                                 + 'optimization, IRC calculation or '
                                 + 'relaxed PES scan.')
parser.add_argument('file', help='Gaussian output file', default=sys.stdin)
parser.add_argument('--stepmin', help='Minimum of step number axis', type=int)
parser.add_argument('--stepmax', help='Maximum of step number axis', type=int)
parser.add_argument('--emin', help='Minimum of energy axis', type=float)
parser.add_argument('--emax', help='Maximum of energy axis', type=float)
parser.add_argument('--out', '-o', help='Filename of output (default: only show)')
args = parser.parse_args()

l = LOGFile(args.file)
if l.irc:
    base = l.irc
    label = 'IRC'
elif l.scan:
    base = l.scan
    label = 'scan'
else:
    base = l
    label = 'optimization'
print('Interpreted %s as a %s calculation.' % (l.file, label))


plt.plot(relative_energies(base.energies))
plt.xlabel('%s step' % label)
plt.ylabel('rel. E$_{el}$ (kJ/mol)')

if args.stepmin is not None:
    plt.gca().set_xlim(left=args.stepmin)
if args.stepmax is not None:
    plt.gca().set_xlim(right=args.stepmax)
if args.emin is not None:
    plt.gca().set_ylim(bottom=args.emin)
if args.emax is not None:
    plt.gca().set_ylim(bottom=args.emax)

if args.out:
    plt.gcf().set_size_inches([5, 5])
    plt.savefig(args.out)
else:
    plt.gcf().set_size_inches([1, 1])
    plt.show()
