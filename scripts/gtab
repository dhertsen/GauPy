#! /usr/bin/env python2.7

import gaupy.table as table
import argparse
from gaupy.log import LOGFile
from gaupy.custom import sixfour, korean, phosphite, pox
from gaupy.filenames import GaussianFile
import logging
from glob import glob
from time import time
import os
import fnmatch

logger = logging.getLogger()
logging.basicConfig(format='%(message)s')

overview = '''
CHARGES
    hi_charges
    mulliken_charges
    npa_charges
FREQUENCIES AND THERMOCHEMISTRY
    enthalpy
    enthalpycorrection
    entropy
    frequencies
    gibbs
    gibbscorrection
    lowest_frequency
    nimag
    pressure
    temperature
    thermal
    thermalcorrection
    zpe
    zpesum
INPUT
    basis
    charge
    chk
    comment
    memory
    method
    modredundant
    multiplicity
    nproc
    route_section
    scrf
    scrf_nonstandard_input
    stoichiometry
GENERAL OUTPUT
    dipole
    energies
    energy
    geometries
    geometry
    input_orientations
    standard_orientations
PATHS
    irc
        direction
        energies
        geometries
        length
        maxcycle
        maxpoints
        relativeenergies
        stepsize
    scan
        energies
        geometries
        length
        relativeenergies
PROGRESS AND STATUS
    cputime
    error
    predicted
    predicted_last
    steps
    termination_count
'''


def main():

    parser = argparse.ArgumentParser('Tabulate parsed output from Gaussian '
                                     + 'output files.')
    parser.add_argument('--sort', '-s', action='store_true',
                        help='Sort reactions')
    parser.add_argument('--groupbynumber', '-n', action='store_true',
                        help='Group reactions by number')
    parser.add_argument('--running', '-r', action='store_true',
                        help='Check job state (R: running, Q: queued)')
    parser.add_argument('--gibbs', '-g', '-G', action='store_true',
                        help='Print relative Gibbs free energy (kJ/mol)')
    parser.add_argument('--enthalpy', '-H', action='store_true',
                        help='Print relative enthalpies (kJ/mol)')
    parser.add_argument('--rmsd', action='store_true',
                        help='Print RMSDs')
    parser.add_argument('--partitionenergies', '-b', action='store_true',
                        help='Relative Gibbs free energies/enthalpies '
                        + 'and RMSDs per partition, only if -gs')
    parser.add_argument('--method', '-m', action='store_true',
                        help='Print method and basis set')
    parser.add_argument('--extra', '-x', action='append', default=[],
                        help='Print extra column '
                        + '(fetch attribute from log.LOGFile object)')
    parser.add_argument('--type', '-t', help='Use different parsing class')
    parser.add_argument('--typeinfo', action='store_true',
                        help='Print info about special types')
    parser.add_argument('--debug', help='Print debug messages',
                        action='store_true')
    parser.add_argument('--time', action='store_true',
                        help='Print time per output file')
    parser.add_argument('--extrafreq', action='store_true',
                        help='Smallest five frequencies')
    parser.add_argument('--backup', '-B', action='store_true',
                        help='Print relevant backup info')
    parser.add_argument('files', nargs='*', help='Gaussian output files'
                        + ' (default: *log)')
    parser.add_argument('--recursive', '-R', action='store_true',
            help="Look for files recursively")
    parser.add_argument('--recursivepattern', '-P',
            help='Only look for these files recursively'
            '(Unix wildcards between quotes)')
    parser.add_argument('--overview', '-o', action='store_true',
            help='Most important data which can be parsed')
    args = parser.parse_args()

    if args.debug:
        logger.setLevel(logging.DEBUG)
    if args.time:
        start = time()

    if args.recursive:
        files = []
        for root, dirnames, filenames in os.walk('.'):
            for filename in fnmatch.filter(
                    filenames, args.recursivepattern or '*'):
                files.append(os.path.join(root, filename)[2:])
    elif not args.files:
        files = []
        for ext in GaussianFile.output_extensions:
            files += glob('*.%s' % ext)
    else:
        files = args.files
    files = GaussianFile.remove_doubles(files)
    files.sort()

    columns = ['file', 'nimag', 'lowest_frequency', 'irc.length',
               'scan.length', 'error']
    layout = ['fit+2', '%-5s', '%-7i', '%-7s', '%-7s', 'fit+2']
    if args.extrafreq:
        columns.insert(3, 'frequencies[1]')
        columns.insert(4, 'frequencies[2]')
        columns.insert(5, 'frequencies[3]')
        columns.insert(6, 'frequencies[4]')
        layout.insert(3, '%-7i')
        layout.insert(4, '%-7i')
        layout.insert(5, '%-7i')
        layout.insert(6, '%-7i')
    if args.method:
        columns.insert(1, 'method')
        layout.insert(1, '%-8s')
        columns.insert(2, 'basis')
        layout.insert(2, '%-15s')
    if args.enthalpy:
        columns.insert(1, 'relenthalpy')
        layout.insert(1, '%-8.1f')
    if args.gibbs:
        columns.insert(1, 'relgibbs')
        layout.insert(1, '%-8.1f')
    if args.rmsd:
        columns.insert(-2, 'rmsd')
        layout.insert(-2, '%-10.3e')
    if args.running or args.backup:
        columns.append('hpc')
        layout.append('fit+2')
        columns.append('cluster')
        layout.append('fit+2')
    if args.backup:
        del columns[1:3]
        del layout[1:3]
        del columns[2]
        del layout[2]
        columns.append('predicted_last')
        layout.append('%-7.1f')
        columns.append('termination_count')
        layout.append('%-7i')
        columns.append('steps')
        layout.append('%-7i')
        columns.append('scan.length')
        layout.append('%-7i')

    for x in args.extra:
        columns.append(x)
        layout.append('fit+2')

    parser = LOGFile
    if args.type:
        if args.type == 'sixfour':
            parser = sixfour.SixFour
        if args.type == 'korean':
            parser = korean.SixThreeBicyclic
        if args.type == 'fos':
            parser = phosphite.Phosphite
        if args.type == 'pox':
            parser = pox.Pox
        if args.typeinfo:
            print parser.info

    if args.overview:
        print overview
    else:
        print table.GaussianTable(files, columns, layout, partition=args.sort,
                                  partition_numbers=args.groupbynumber,
                                  partition_energies_rmsds=args.partitionenergies,
                                  type=parser)

    if args.time:
        timeperfile = (time() - start) / len(files)
        print('%.3fs per output file' % timeperfile)


if __name__ == '__main__':
    try:
        main()
    except ValueError:
        logger.error('No Gaussian output files!')
