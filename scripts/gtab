#! /usr/bin/python

import gaupy.table as table
import argparse
from gaupy.log import LOGFile
from gaupy.custom import sixfour, korean
from gaupy.filenames import GaussianFile
import logging
from glob import glob
from time import time

logger = logging.getLogger()
logging.basicConfig(format='%(message)s')


def main():

    parser = argparse.ArgumentParser('Tabulate parsed output from Gaussian '
                                     + 'output files.')
    parser.add_argument('--sort', '-s', action='store_true',
                        help='Sort reactions')
    parser.add_argument('--running', '-r', action='store_true',
                        help='Check job state (R: running, Q: queued)')
    parser.add_argument('--gibbs', '-g', '-G', action='store_true',
                        help='Print relative Gibbs free energy (kJ/mol)')
    parser.add_argument('--enthalpy', '-H', action='store_true',
                        help='Print relative enthalpies (kJ/mol)')
    parser.add_argument('--rmsd', action='store_true',
                        help='Print RMSDs')
    parser.add_argument('--partitionenergies', '-b', action='store_true',
                        help='Relative Gibbs free energies/enthalpies '
                        + 'and RMSDs per partition, only if -gs')
    parser.add_argument('--method', '-m', action='store_true',
                        help='Print method and basis set')
    parser.add_argument('--extra', '-x', action='append', default=[],
                        help='Print extra column '
                        + '(fetch attribute from log.LOGFile object)')
    parser.add_argument('--type', '-t', help='Use different parsing class')
    parser.add_argument('--debug', help='Print debug messages',
                        action='store_true')
    parser.add_argument('--time', action='store_true',
                        help='Print time per output file')
    parser.add_argument('--extrafreq', action='store_true',
                        help='Smallest five frequencies')
    parser.add_argument('files', nargs='*', help='Gaussian output files'
                        + ' (default: *log)')
    args = parser.parse_args()

    if args.debug:
        logger.setLevel(logging.DEBUG)
    if args.time:
        start = time()

    if not args.files:
        files = glob('*log')
    else:
        files = GaussianFile.remove_doubles(args.files)

    columns = ['file', 'nimag', 'lowest_frequency', 'irc.length', 'error']
    layout = ['fit+2', '%-5s', '%-7i', '%-7s', 'fit+2']
    if args.extrafreq:
        columns.insert(3, 'frequencies[1]')
        columns.insert(4, 'frequencies[2]')
        columns.insert(5, 'frequencies[3]')
        columns.insert(6, 'frequencies[4]')
        layout.insert(3, '%-7i')
        layout.insert(4, '%-7i')
        layout.insert(5, '%-7i')
        layout.insert(6, '%-7i')
    if args.method:
        columns.insert(1, 'method')
        layout.insert(1, '%-8s')
        columns.insert(2, 'basis')
        layout.insert(2, '%-15s')
    if args.enthalpy:
        columns.insert(1, 'relenthalpy')
        layout.insert(1, '%-8.1f')
    if args.gibbs:
        columns.insert(1, 'relgibbs')
        layout.insert(1, '%-8.1f')
    if args.rmsd:
        columns.insert(-2, 'rmsd')
        layout.insert(-2, '%-10.3e')
    if args.running:
        columns.append('hpc')
        layout.append('fit+2')
        columns.append('cluster')
        layout.append('fit+2')

    for x in args.extra:
        columns.append(x)
        layout.append('fit+2')

    parser = LOGFile
    if args.type:
        if args.type == 'sixfour':
            parser = sixfour.SixFour
        if args.type == 'korean':
            parser = korean.SixThreeBicyclic

    print table.GaussianTable(files, columns, layout, partition=args.sort,
                              partition_energies_rmsds=args.partitionenergies,
                              type=parser)

    if args.time:
        timeperfile = (time() - start) / len(files)
        print('%.3fs per output file' % timeperfile)


if __name__ == '__main__':
    try:
        main()
    except ValueError:
        logger.error('No Gaussian output files!')
