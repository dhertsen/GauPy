#! /usr/bin/env python2.7

import argparse
from gaupy.log import LOGFile
from gaupy.filenames import GaussianFile
from gaupy.molecules import SuperMolecule
import logging
from glob import glob

logger = logging.getLogger()
logging.basicConfig(format='%(message)s')


def main():

    parser = argparse.ArgumentParser('Move atoms along the normal coordinates'
                                     + ' of one of the three lowest lying'
                                     + ' vibrational frequencies.')
    parser.add_argument('--frequency', '-f', type=int, choices=[1, 2, 3],
                        default=1, help='Which frequency (1=lowest)')
    parser.add_argument('--amplitude', '-a', default=1.0, type=float,
                        help='Amplitude of nudge')
    parser.add_argument('--output', '-o',
                        choices=['com', 'xyz', 'movie'], default='com',
                        help='Create two Gaussian input (com) or xyz (xyz)'
                        + ' files with forward and reverse nudges'
                        + ' or write a movie (movie)')
    parser.add_argument('--steps', '-s', type=int, default=100,
                        help='Number of steps in a movie')
    parser.add_argument('files', nargs='*', help='Gaussian output files'
                        + ' (default: *log)')
    parser.add_argument('--debug', help='Print debug messages',
                        action='store_true')
    args = parser.parse_args()

    if args.debug:
        logger.setLevel(logging.DEBUG)

    if not args.files:
        files = glob('*log')
    else:
        files = GaussianFile.remove_doubles(args.files)

    for f in files:
        l = LOGFile(f)
        if args.output in ['com', 'xyz']:
            # Normal coordinates are defined with respect to standard
            # orientations, unless the 'nosymmetry' keyword has been used.
            # In that case, use the input geometries.
            geometries = l.standard_orientations
            if 'nosymm' in l.route_section and not l.standard_orientations:
                geometries = l.input_orientations
            fwd_coord = (l.geometries[-1].coordinates
                         + args.amplitude * l.normal_coordinates[
                             args.frequency - 1])
            rev_coord = (l.geometries[-1].coordinates
                         - args.amplitude * l.normal_coordinates[
                             args.frequency - 1])
            fwd_geom = SuperMolecule(numbers=l.geometry.numbers,
                                     coordinates=fwd_coord)
            rev_geom = SuperMolecule(numbers=l.geometry.numbers,
                                     coordinates=rev_coord)
            fwd_file = l.files.add('nudgeforward')
            rev_file = l.files.add('nudgereverse')
            if args.output == 'xyz':
                fwd_geom.to_xyz(fwd_file.xyz)
                rev_geom.to_xyz(rev_file.xyz)
            elif args.output == 'com':
                l.geometry = fwd_geom
                l.write_input(fwd_file)
                l.geometry = rev_geom
                l.write_input(rev_file)
        elif args.output == 'movie':
            steps = [l.normal_coordinates[args.frequency - 1] *
                     (-args.amplitude + (i * args.amplitude * 2.0
                                         / args.steps))
                     for i in range(args.steps)]
            geometries = [SuperMolecule(
                numbers=l.geometry.numbers,
                coordinates=l.standard_orientations[-1].coordinates + step)
                for step in steps]
            xyz = ''.join([g.to_string(header=True, comment=i) + '\n'
                           for i, g in enumerate(geometries)])
            fname = l.files.add('nudgemovie').xyz
            f = open(fname, 'w')
            f.write(xyz)
            print(fname + ' written')
            f.close()


if __name__ == '__main__':
    try:
        main()
    except ValueError:
        logger.error('No Gaussian output files!')
